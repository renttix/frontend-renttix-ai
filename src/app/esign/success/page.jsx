/**
 * Dynamic E-Signature Success Page
 *
 * Supports the following URL parameters for dynamic content:
 * - orderId: Associated order ID (optional)
 * - documentType: Type of document (contract, agreement, document, etc.)
 * - signerName: Name of the person who signed
 * - signerEmail: Email of the signer
 * - documentName: Display name of the signed document
 * - signedAt: ISO timestamp of when signature was made
 * - isCompleted: Whether the signature process is fully completed (true/false)
 *
 * Example URLs:
 * /esign/success?orderId=123&documentType=contract&signerName=John%20Doe
 * /esign/success?documentName=Service%20Agreement&isCompleted=true
 */

"use client";
import React, { useEffect, useState } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { Card } from "primereact/card";
import { Button } from "primereact/button";
import { Toast } from "primereact/toast";
import { useRef } from "react";

const EsignSuccessPage = () => {
  const router = useRouter();
  const searchParams = useSearchParams();
  const toast = useRef(null);
  const [documentData, setDocumentData] = useState({
    orderId: "",
    documentType: "",
    signerName: "",
    signerEmail: "",
    signedAt: new Date(),
    documentName: "",
    isCompleted: true
  });

  useEffect(() => {
    // Get all URL parameters to make the page fully dynamic
    const params = {
      orderId: searchParams.get('orderId') || "",
      documentType: searchParams.get('documentType') || "document",
      signerName: searchParams.get('signerName') || "",
      signerEmail: searchParams.get('signerEmail') || "",
      documentName: searchParams.get('documentName') || "E-signature Document",
      signedAt: searchParams.get('signedAt') ? new Date(searchParams.get('signedAt')) : new Date(),
      isCompleted: searchParams.get('isCompleted') !== 'false'
    };

    setDocumentData(params);
    console.log('Success page loaded with dynamic data:', params);
  }, [searchParams]);

  const handleViewOrder = () => {
    if (documentData.orderId) {
      // Redirect to order details page
      router.push(`/order/${documentData.orderId}`);
    } else {
      // Just go back to dashboard or home
      router.push('/');
    }
  };

  const handleNewSignature = () => {
    router.push('/dashboard');
  };

  const handleDownloadReceipt = () => {
    // Simulate downloading a receipt or completion confirmation
    toast.current?.show({
      severity: "info",
      summary: "Download Starting",
      detail: `${documentData.documentName} signature confirmation is being prepared for download...`,
      life: 3000,
    });

    // Generate dynamic receipt content based on documentData
    const receiptContent = `Signature Confirmation Receipt

Document Type: ${documentData.documentType || 'Document'}
Document Name: ${documentData.documentName}
Order ID: ${documentData.orderId || 'N/A'}

Signer Details:
Name: ${documentData.signerName || 'N/A'}
Email: ${documentData.signerEmail || 'N/A'}

Signature Information:
Signed: ${documentData.signedAt.toLocaleString()}
Status: ${documentData.isCompleted ? 'Completed' : 'Pending'}

Signed electronically on: ${new Date().toLocaleString()}

This electronic signature is legally binding and equivalent to a handwritten signature.

---
Generated by RentTix.AI E-Signature System`;

    // In a real implementation, this would generate and download a PDF receipt
    setTimeout(() => {
      const element = document.createElement('a');
      const file = new Blob([receiptContent], { type: 'text/plain' });
      element.href = URL.createObjectURL(file);
      element.download = `signature-receipt-${documentData.orderId || 'confirmation'}-${Date.now()}.txt`;
      document.body.appendChild(element);
      element.click();
      document.body.removeChild(element);

      toast.current?.show({
        severity: "success",
        summary: "Download Complete",
        detail: "Your signature confirmation has been downloaded.",
        life: 3000,
      });
    }, 1500);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-blue-50 py-12 px-4">
      <Toast ref={toast} position="top-right" />

      <div className="max-w-2xl mx-auto">
        {/* Success Animation/Icon */}
        <div className="text-center mb-8">
          <div className="relative inline-block">
            <div className="w-20 h-20 bg-green-500 rounded-full flex items-center justify-center mb-4 mx-auto animate-pulse">
              <i className="pi pi-check text-white text-2xl"></i>
            </div>
            {/* Celebration ring animation */}
            <div className="absolute inset-0 rounded-full border-4 border-green-300 animate-ping"></div>
          </div>

          <h1 className="text-4xl font-bold text-gray-900 mb-2">
            {documentData.documentType === 'contract' ? 'Contract Signed!' :
             documentData.documentType === 'agreement' ? 'Agreement Signed!' :
             'Document Signed!'}
          </h1>
          <p className="text-lg text-gray-600">
            {documentData.signerName ? `${documentData.signerName}, your digital signature has been successfully recorded` :
             'Your digital signature has been successfully recorded'}
          </p>
        </div>

        {/* Success Card */}
        <Card className="shadow-xl border-0 mb-8">
          <div className="text-center">
            <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mb-6 mx-auto">
              <i className="pi pi-file-pdf text-green-600 text-2xl"></i>
            </div>

            <h2 className="text-2xl font-semibold text-gray-800 mb-4">
              {documentData.documentName} Signed Successfully
            </h2>

            <div className="bg-blue-50 border border-blue-200 rounded-lg p-6 mb-6">
              <div className="space-y-3">
                {/* Document Type */}
                <div className="flex justify-between items-center">
                  <span className="font-medium text-gray-600">Document Type:</span>
                  <span className="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm font-medium uppercase">
                    {documentData.documentType || 'Document'}
                  </span>
                </div>

                {/* Status */}
                <div className="flex justify-between items-center">
                  <span className="font-medium text-gray-600">Status:</span>
                  <span className={`px-3 py-1 rounded-full text-sm font-medium ${
                    documentData.isCompleted
                      ? 'bg-green-100 text-green-800'
                      : 'bg-orange-100 text-orange-800'
                  }`}>
                    {documentData.isCompleted ? 'Signed & Completed' : 'Signature Processed'}
                  </span>
                </div>

                {/* Order ID - conditionally shown */}
                {documentData.orderId && (
                  <div className="flex justify-between items-center">
                    <span className="font-medium text-gray-600">Order ID:</span>
                    <span className="font-mono text-gray-800">{documentData.orderId}</span>
                  </div>
                )}

                {/* Signer Name - conditionally shown */}
                {documentData.signerName && (
                  <div className="flex justify-between items-center">
                    <span className="font-medium text-gray-600">Signer:</span>
                    <span className="text-gray-800">{documentData.signerName}</span>
                  </div>
                )}

                {/* Signed On */}
                <div className="flex justify-between items-center">
                  <span className="font-medium text-gray-600">Signed On:</span>
                  <span className="text-gray-800">{documentData.signedAt.toLocaleDateString()}</span>
                </div>

                {/* Time */}
                <div className="flex justify-between items-center">
                  <span className="font-medium text-gray-600">Time:</span>
                  <span className="text-gray-800">{documentData.signedAt.toLocaleTimeString()}</span>
                </div>
              </div>
            </div>

            {/* What happens next - Dynamic based on document type */}
            <div className="bg-green-50 border border-green-200 rounded-lg p-4 mb-6">
              <h3 className="font-semibold text-green-800 mb-2">What happens next?</h3>
              <ul className="text-sm text-green-700 space-y-1 text-left">
                {documentData.documentType === 'contract' && (
                  <>
                    <li>• Your contract signature has been securely stored</li>
                    <li>• Contract execution is now complete</li>
                    <li>• Both parties will be notified via email</li>
                    <li>• Your signed contract is available for download</li>
                  </>
                )}
                {documentData.documentType === 'agreement' && (
                  <>
                    <li>• Your agreement signature has been securely stored</li>
                    <li>• The agreement is now legally binding</li>
                    <li>• All parties will receive email confirmation</li>
                    <li>• Signed agreement can be accessed anytime</li>
                  </>
                )}
                {!['contract', 'agreement'].includes(documentData.documentType) && (
                  <>
                    <li>• Your signature has been securely stored in our system</li>
                    <li>• The {documentData.documentType || 'document'} is now legally binding</li>
                    <li>• All parties involved will receive notification</li>
                    <li>• You can access the signed {documentData.documentType || 'document'} anytime through your account</li>
                  </>
                )}
              </ul>
            </div>
          </div>
        </Card>

        {/* Action Buttons */}
        <div className="flex justify-center">
          {/* <Button
            label={documentData.orderId ? "View Order" : "Go Home"}
            icon={documentData.orderId ? "pi pi-eye" : "pi pi-home"}
            onClick={handleViewOrder}
            className="p-button-outlined p-button-lg"
            disabled={false}
          />

          <Button
            label="Dashboard"
            icon="pi pi-home"
            onClick={handleNewSignature}
            className="p-button-text p-button-lg"
          /> */}

         <div className="">
           <Button
            label={`Download Receipt`}
            icon="pi pi-download"
            onClick={handleDownloadReceipt}
            size="small"
            className="p-button-secondary w-full"
          />
         </div>
        </div>

        {/* Additional Information */}
        <Card className="mt-8 bg-gray-50 border-0">
          <div className="text-center">
            <h3 className="text-lg font-semibold text-gray-800 mb-4">
              Security & Legal Information
            </h3>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 text-sm text-gray-600">
              <div>
                <i className="pi pi-shield text-blue-500 text-xl mb-2 block"></i>
                <p>
                  <strong>Secure & Encrypted:</strong> Your signature is protected with
                  industry-standard encryption
                </p>
              </div>

              <div>
                <i className="pi pi-check-circle text-green-500 text-xl mb-2 block"></i>
                <p>
                  <strong>Legally Binding:</strong> Digital signatures are legally
                  equivalent to handwritten signatures
                </p>
              </div>
            </div>

            <div className="mt-6 p-4 bg-gray-100 rounded-lg">
              <p className="text-xs text-gray-500">
                For any questions regarding this signature or the associated document,
                please contact our support team.
              </p>
            </div>
          </div>
        </Card>
      </div>
    </div>
  );
};

export default EsignSuccessPage;